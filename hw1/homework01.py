# Задание 1. Встроенные типы данных, операторы, функции и генераторы
#
# Напишите реализации объявленных ниже функций. Для проверки
# корректности реализации ваших функций, запустите тесты:
#
# pytest test_homework01.py
#
# Если написанный вами код не содержит синтаксических ошибок,
# вы увидите результаты тестов ваших решений.


def fac(n):
    """
    Факториал

    Факториал числа N - произведение всех целых чисел от 1 до N
    включительно. Например, факториал числа 5 - произведение
    чисел 1, 2, 3, 4, 5.

    Функция должна вернуть факториал аргумента, числа n.
    """
    assert n >= 0, "Факториал отрицательного числа не определен"
    if n == 0:
        return 1
    return n*fac(n-1)

def gcd(a, b):
    """
    Наибольший общий делитель (НОД) для двух целых чисел.

    Предполагаем, что оба аргумента - положительные числа
    Один из самых простых способов вычесления НОД - метод Эвклида,
    согласно которому

    1. НОД(a, 0) = a
    2. НОД(a, b) = НОД(b, a mod b)

    (mod - операция взятия остатка от деления, в python - оператор '%')
    """
    return a if b == 0 else gcd(b, a % b)


def fib():
    """
    Генератор для ряда Фибоначчи

    Вам необходимо сгенерировать бесконечный ряд чисел Фибоначчи,
    в котором каждый последующий элемент ряда является суммой двух
    предыдущих. Начало последовательности: 1, 1, 2, 3, 5, 8, 13, ..

    Подсказка по реализации: для бесконечного цикла используйте идиому

    while True:
      ..

    """
    prev, fib = 0, 1
    while True:
        yield fib
        prev, fib = fib, prev + fib


def flatten(seq):
    """
        Функция, преобразующая вложенные последовательности любого уровня
        вложенности в плоские, одноуровневые.

        >>> flatten([])
        []
        >>> flatten([1, 2])
        [1, 2]
        >>> flatten([1, [2, [3]]])
        [1, 2, 3]
        >>> flatten([(1, 2), (3, 4)])
        [1, 2, 3, 4]
        """
    if seq == [] or seq == ():
        return seq
    if isinstance(seq[0], list) or isinstance(seq[0], tuple):
        return flatten(list(seq[0])) + flatten(list(seq[1:]))
    return seq[:1] + flatten(seq[1:])


def call_count():
    """
    Декоратор, подсчитывающий количество вызовов задекорированной функции.

    Пример использования:

    @call_count
    def add(a, b):
        return a + b

    >>> add.call_count
    0
    >>> add(1, 2)
    3
    >>> add.call_count
    1

    Подсказки по реализации: функторы, @property

    """

    pass
